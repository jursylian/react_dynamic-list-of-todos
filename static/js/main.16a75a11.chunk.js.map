{"version":3,"sources":["components/TodoList/TodoList.tsx","components/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUserId","useState","inputValue","setInputValue","selectValue","setSelectValue","filteredTodos","filter","title","includes","completed","className","htmlFor","id","type","placeholder","value","onChange","event","target","map","todo","cn","TodoList__item","checked","readOnly","onClick","userId","BASE_URL","CurrentUser","clearId","user","setUser","useEffect","fetch","then","response","json","getUser","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","hasLoadingError","setHasLoadingError","isLoading","setLoading","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16a75a11.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUserId: (userId: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectUserId }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectValue(event.target.value);\n  };\n\n  let filteredTodos: Todo[] = [...todos]\n    .filter(({ title }) => title.includes(inputValue));\n\n  if (selectValue === 'completed') {\n    filteredTodos = filteredTodos.filter(({ completed }) => completed === true);\n  } else if (selectValue === 'active') {\n    filteredTodos = filteredTodos.filter(({ completed }) => completed\n    === false);\n  }\n\n  return (\n\n    <div className=\"TodoList\">\n      <h2 className=\"title is-2\">\n        <label\n          htmlFor=\"input\"\n          className=\"TodoList__header-input\"\n        >\n          <p>Search todos</p>\n          <input\n            id=\"input\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Write a title here\"\n            value={inputValue}\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <label\n          htmlFor=\"select\"\n          className=\"TodoList__header-select\"\n        >\n          <p>Select state of todos</p>\n          <select\n            id=\"select\"\n            className=\"select is-fullwidth mt-3 mb-5\"\n            value={selectValue}\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </label>\n      </h2>\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n\n            <li\n              className={cn({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label\n                htmlFor=\"checkbox\"\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                  id=\"checkbox\"\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => selectUserId(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nexport function getTodos() {\n  return (\n    fetch(`${BASE_URL}/todos`).then(response => response.json())\n  );\n}\n\nexport function getUser(userId: number) {\n  return (\n    fetch(`${BASE_URL}/users/${userId}`).then(response => response.json())\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number\n  clearId: (n: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearId }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(response => setUser(response));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected User:&nbsp;\n          {userId}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"button is-info is-fullwidth mt-5\"\n        onClick={() => {\n          clearId(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .then(() => setLoading(true))\n      .catch(() => {\n        setHasLoadingError(true);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {hasLoadingError ? (\n        <p>Data is not found</p>\n      ) : (\n        <>\n          <div className=\"App__sidebar\">\n            {!isLoading ? (\n              <p>Loading...</p>\n            ) : (\n              <TodoList\n                todos={todos}\n                selectUserId={setSelectedUserId}\n              />\n            )}\n\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearId={setSelectedUserId}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}